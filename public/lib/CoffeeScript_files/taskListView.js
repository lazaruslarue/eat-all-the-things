// Generated by CoffeeScript 1.6.3
/*
=========================
DO NOT EDIT THIS FILE!!!!
=========================
*/


(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.TaskListView = (function(_super) {
    __extends(TaskListView, _super);

    function TaskListView() {
      _ref = TaskListView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TaskListView.prototype.className = 'container';

    TaskListView.prototype.events = {
      'click [type="checkbox"]': 'completeTask'
    };

    TaskListView.prototype.initialize = function() {
      this.collection = new Tasks(taskData);
      this.collection.bind('add', this.render, this);
      this.$el.append($("<div>Remaining tasks: <span class='tasks-remaining'></span></div><br /><div class='task-list'></div>"));
      this.collection.bind('completed', this.render, this);
      return this.render();
    };

    TaskListView.prototype.render = function() {
      this.$('.task-list').children().detach();
      this.$('.task-list').append(this.collection.getTasks().map(function(task) {
        return new TaskView({
          model: task
        }).render();
      }));
      this.$('.tasks-remaining').html(this.collection.countIncomplete());
      return this.$el;
    };

    TaskListView.prototype.completeTask = function(e) {
      var model, numRemaining, taskClasses, _i, _len, _ref1, _results;
      taskClasses = e.currentTarget.parentElement.classList;
      numRemaining = this.$('.tasks-remaining').html();
      if (taskClasses.contains('crossed-out')) {
        taskClasses.remove('crossed-out');
        this.$('.tasks-remaining').html(++numRemaining);
      } else {
        taskClasses.add('crossed-out');
        this.$('.tasks-remaining').html(--numRemaining);
      }
      _ref1 = this.collection.models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        model = _ref1[_i];
        if (model.attributes.title === e.currentTarget.value) {
          _results.push(model.complete());
        }
      }
      return _results;
    };

    return TaskListView;

  })(Backbone.View);

}).call(this);

/*
//@ sourceMappingURL=taskListView.map
*/
